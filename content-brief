<div class="{% unless section.settings.full_width %}article{% endunless %} {% if section.settings.use_alt_bg %}use-alt-bg fully-padded-row--{{ section.settings.height }}{% else %}fully-spaced-row--{{ section.settings.height }}{% endif %}" data-cc-animate>
  <div class="container">
    <div class="align-{{ section.settings.text_alignment }} spaced-column fpd-content-brief-wrapper">
      {% assign skip_block_count = 0 %}
      <fpd-readmore-accordion button-text="Read More" button-class="w-full pdp-atc btn1">
      {% for block in section.blocks %}
        {%- liquid
          if skip_block_count > 0
            assign skip_block_count = skip_block_count | minus: 1
            continue
          endif
        -%}
        
        {% case block.type %}
          {% when 'heading' %}
            {% if block.settings.use_h1 %}
              <h1 class="majortitle in-content h2" {{ block.shopify_attributes }}>{{ block.settings.title | escape }}</h1>
            {% else %}
              <h2 class="h2-style h2" {{ block.shopify_attributes }}>{{ block.settings.title | escape }}</h2>
            {% endif %}
          {% when 'text' %}
            <div class="lightly-spaced-row {% if block.settings.enlarge_text %}large-text{% endif %}" {{ block.shopify_attributes }}>
                  {{ block.settings.text }}
           </div>
        {% endcase %}
      {% endfor %}
      </fpd-readmore-accordion>
    </div>
  </div>
</div>
<script>
(function () {
  const uniquePrefix = 'fp';

  class FpdReadmoreAccordion extends HTMLElement {
    constructor() {
      super();
      this.expand = false; // default state
      this.buttonhide = this.hasAttribute('button-hide-expand');

      if (!this.buttonhide) {
        this.toggleVisibility();
        const btn = document.createElement('button');
        btn.innerHTML = this.getAttribute('button-text') || 'Read More';
        btn.setAttribute('class', `${this.getAttribute('button-class')} btn-readmore`);
        btn.setAttribute('style', this.getAttribute('button-style') || '');
        this.appendChild(btn);
        btn.addEventListener('click', () => this.toggleExpand(btn));
      }
    }

    static get observedAttributes() {
      return ['expand'];
    }

    attributeChangedCallback(name, oldValue, newValue) {
      if (name === 'expand' && oldValue !== newValue) {
        this.toggleVisibility();
      }
    }

    toggleExpand(button) {
      this.expand = !this.expand;
      button.innerHTML = this.expand ? 'Read Less' : 'Read More';
      this.toggleVisibility();
    }

    toggleVisibility() {
      const contentItems = Array.from(this.children).filter(child => child.nodeName !== 'BUTTON');
      contentItems.forEach((child, index) => {
        child.classList.toggle('hidden', !this.expand && index > 0);
      });
    }
  }

  customElements.define(`${uniquePrefix}d-readmore-accordion`, FpdReadmoreAccordion);
})();
</script>
<style>
.fpd-content-brief-wrapper {
  max-width: 1920px;
  margin: 50px auto 0;
}
.fpd-content-brief-wrapper a {
  text-decoration: underline !important;
  color: #419da8 !important;
}

h1.majortitle { margin-bottom: 30px; }
.h2-style { font-size: 1.5em; font-weight: bold; }

fpd-readmore-accordion h2, fpd-readmore-accordion h3, fpd-readmore-accordion h4 {
  margin-top: 30px !important;
  margin-bottom: 20px !important;
}
fpd-readmore-accordion[hidden] {
  display: none;
}
fpd-readmore-accordion .hidden {
  display: none;
}
fpd-readmore-accordion ul li {
  margin-bottom: 10px;
}
fpd-readmore-accordion ul {
  text-align: left;
  display: block;
  padding: 20px 0;
}
.btn-readmore {
  cursor: pointer;
  margin-top: 20px;
  text-transform: uppercase;
  padding: 11px 23px 10px;
  border-radius: 4px;
  font-weight: 400;
  width: fit-content;
}
</style>
